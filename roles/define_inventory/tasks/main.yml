---
# tasks file for define_inventory
- block:
  - name: read build definition
    include_vars:
      file: "{{ auto_dir + '/' + SYS_NAME }}"
      name: 'environment_definition'

  - ansible.builtin.debug: var=environment_definition

  - name: check if required variables are defined
    ansible.builtin.set_fact:
      pdn: "{{ 'Primary Datacenter name is not defined' if (environment_definition.datacenter.primary.name is not defined or environment_definition.datacenter.primary.name == none) else '' }}"
      pma: "{{ 'Primary snapshot maximum age is not defined' if (environment_definition.datacenter.primary.max_age is not defined or environment_definition.datacenter.primary.max_age == none) else '' }}"

  - name: verify that all variables are defined
    ansible.builtin.assert:
      that:
        - vars[item] == ''
      fail_msg: "{{ vars[item] }}"
    loop: [ pdn, pma ]

  - name: verify that primary datacenter is supported
    ansible.builtin.assert:
      that:
        - "datacenters[environment_definition.datacenter.primary.name] is defined"
      fail_msg: "The primary datacenter selected, {{ environment_definition.datacenter.primary.name }}, is not in the list of supported datacenters. Aborting!"

  - name: verify that primary maximum age is valid
    ansible.builtin.assert:
      that:
        - "environment_definition.datacenter.primary.max_age|type_debug == 'int'"
      fail_msg: "The snapshot maximum age defined, {{ environment_definition.datacenter.primary.max_age }}, is not an integer. Aborting!"

  - name: detect directory owner
    ansible.builtin.shell: ls -ld {{ auto_dir }}/Bash | awk '{print $3}' | xargs
    register: dir_owner

  - name: detect directory group
    ansible.builtin.shell: ls -ld {{ auto_dir }}/Bash | awk '{print $4}' | xargs
    register: dir_group

  - name: generate build inventory
    ansible.builtin.copy:
      src: "files/inventory/"
      dest: "{{ auto_dir + '/inventories/' + SYS_NAME|basename|splitext|first|lower }}"
      owner: "{{ dir_owner.stdout }}"
      group: "{{ dir_group.stdout }}"
    become: yes

  - name: customize inventory
    ansible.builtin.template:
      src: "{{ tmpl_item.name }}"
      dest: "{{ tmpl_item.dest }}"
      owner: "{{ dir_owner.stdout }}"
      group: "{{ dir_group.stdout }}"
    loop:
      - { name: 'templates/all.j2', dest: "{{ auto_dir + '/inventories/' + SYS_NAME|basename|splitext|first|lower + '/group_vars/all.yml' }}" }
      - { name: 'templates/hosts.j2', dest: "{{ auto_dir + '/inventories/' + SYS_NAME|basename|splitext|first|lower + '/hosts.yml' }}" }
    loop_control:
      loop_var: tmpl_item
    become: yes

  check_mode: no
  tags: [ 'always', 'define_inventory' ]
