---
# tasks file for remove_decomm
- name: Main remove_decomm block
  delegate_to: localhost
  run_once: true
  tags: ['remove_decomm']
  block:
    - name: Remove snapshots
      ansible.builtin.include_role:
        name: remove_snapshots
        tasks_from: task_get_date_time.yml
      when:
        - ansible_date_time.date is not defined
        - ansible_date_time.date | default('') == ''
    - name: Define get_vm_list_rd
      ansible.builtin.set_fact:
        get_vm_list_rd: true
      when: reg_vm_list is not defined
    - name: Define get_vm_on_decomm_list_rd
      ansible.builtin.set_fact:
        get_vm_on_decomm_list_rd: true
      when:
        - vm_on_decomm_list is not defined
    - name: Removing snapshots
      when: get_vm_list_rd | default(false)
      block:
        - name: Remove snapshots
          ansible.builtin.include_role:
            name: remove_snapshots
            tasks_from: task_get_list_vms.yml
         #   apply:
         #     vars:
         #       object_type: 'template'
      rescue:
        - name: Debug message
          ansible.builtin.debug:
            msg: "{{ reg_vm_list }}"
      always:
        - name: Assert that getting the list of VMs succeeded
          ansible.builtin.assert:
            that: reg_vm_list is succeeded
    - name: Define list of VMs to be decommissioned
      ansible.builtin.set_fact:
        to_decomm_list: "{{ vm_on_decomm_list }}"
      loop_control:
        loop_var: vm_item
        label: "{{ vm_item.guest_name }}"
      no_log: true
      when: not get_vm_on_decomm_list_rd | default(false)
    - name: Define list of VMs to be decommissioned
      ansible.builtin.set_fact:
        to_decomm_list: "{{ to_decomm_list | default([]) + [{'vm_folder': vm_item.folder, 'vm_name': vm_item.guest_name, 'vm_uuid': vm_item.uuid}] }}"
      loop: "{{ reg_vm_list.virtual_machines | selectattr('guest_name', 'search', 'on-decomm-list') | list }}"
      loop_control:
        loop_var: vm_item
        label: "{{ vm_item.guest_name }}"
      no_log: true
      when: Get_vm_on_decomm_list_rd | default(false)
    - name: Remove decomm VM
      ansible.builtin.include_tasks:
        file: task_remove_decomm_vm.yml
        apply:
          vars:
            curr_folder: "{{ vm_item.vm_folder }}"
            curr_vm: "{{ vm_item.vm_name }}"
            curr_uuid: "{{ vm_item.vm_uuid }}"
      loop: "{{ to_decomm_list | default([]) | sort(attribute='vm_folder') }}"
      loop_control:
        loop_var: vm_item
    - name: Delete folder
      ansible.builtin.include_tasks:
        file: task_delete_folder_path.yml
        apply:
          vars:
            curr_folder: "{{ folder_item.split(':') | first }}"
      loop: "{{ deleted_vm_folder_list | default([]) }}"
      loop_control:
        loop_var: folder_item
