---
# Tasks for notify
- block:
  - name: delete svc acct vault file
    file:
      path: "{{ file_item }}"
      state: absent
    loop:
      - "{{ SVCFILE | default('') }}"
    loop_control:
      loop_var: file_item
    when: file_item != ''
    check_mode: no
    become: yes
  - name: Get playbook status from {{ LFILE }}
    ansible.builtin.shell: "grep 'PLAY RECAP' {{ LFILE }} &>/dev/null && sed -n '/PLAY RECAP /{h;b};H;${x;p}' {{ LFILE }} | sed -n '/PLAY RECAP /,+{{ NHOSTS }}p' | grep -v awk | grep -E 'PLAY RECAP|(unreachable|failed)=[1-9]+' || echo 'No Play Recap found'"
    register: playbook_status
  - name: define execution status
    set_fact:
      EXEC_STATUS: "{{ EXEC_STATUS | default ([]) + [((line_item | regex_replace ('^.*[\\|] ', '')).split(' : ')|first).strip()] }}"
    loop: "{{ playbook_status.stdout_lines | select('regex', '(unreachable=|failed=)[1-9]+') }}"
    loop_control:
      loop_var: line_item
  - name: Get number of snapshots from {{ LFILE }}
    ansible.builtin.shell: |
      grep 'faulties_number = ' {{ LFILE }} | sed 's/"//g; s/,//g' || echo 'Number of faulty VMs not found'
      grep 'snaps_number = ' {{ LFILE }} | sed 's/"//g; s/,//g' || echo 'Number of snapshots not found'
      grep 'snaps_size = ' {{ LFILE }} | sed 's/"//g' || echo 'Size of snapshots not found'
    register: reg_numbers
  - name: Get user's identity
    shell: head -4 {{ LFILE }}
    register: userid
  - name: Check if user requested to abort
    shell: grep "user requested abort!" {{ LFILE }}
    register: user_abort
    ignore_errors: true
  - name: Get playbook execution time from {{ LFILE }}
    ansible.builtin.shell: |
      grep 'PLAY RECAP' {{ LFILE }} &>/dev/null && sed -n '/PLAY RECAP /{h;b};H;${x;p}' {{ LFILE }} | sed -n '/PLAY RECAP /,+{{ NHOSTS|int + 2 }}p' | grep -vE 'awk|RECAP|===' | grep '*' &>/dev/null && sed -n '/PLAY RECAP /{h;b};H;${x;p}' {{ LFILE }} | sed -n '/PLAY RECAP /,+{{ NHOSTS|int + 2 }}p' | grep -vE 'awk|RECAP|===' | grep -E '.[0-9]{,3} \*{3,}' | tail -1 | awk '{print $(NF - 1)}' || echo 'No Execution time found'
    register: playbook_execution
  - set_fact:
      playbook_time: "{{ playbook_time|default('') + ' ' + time_item.0|regex_replace('^0*', '') + time_item.1 }}"
    loop: "{{ playbook_execution.stdout.split(':')|zip([ 'h', 'm', 's' ])|list }}"
    loop_control:
      loop_var: time_item
    when: time_item.0|int != 0
  - set_fact:
      NOTIF_MSG: "{{ NOTIF_MSG | default ([]) + [item] | list }}"
    vars:
      fe: "{{ playbook_status.stdout | regex_search('(unreachable=|failed=)[1-9]+') }}"
    loop:
      - '========================================================='
      - ' '
      - "{{ userid.stdout.split('\n') | join('<br/>') | replace ('This script was run', 'Job started') | replace ('#', '') | regex_replace ('(Machine )([a-z]+.[a-z]+)( [0-9])', '\\1**`\\2`**\\3') | replace('<br/>An', 'An') }}"
      - "**`{{ playbook_dir.split('/')[-2] }}`** Script **`{{ SNAME }} {{ SARG | replace ('dash', '-') | replace ('*', '') }}`** completed {{ 'successfully' if (fe == '' and playbook_status.stdout != 'No Play Recap found') else 'with **`errors`**:' }}{{ ' in ' + '`' + playbook_time|default('1s') + '`' if playbook_execution.stdout is not search('found') else '' }}"
      - "{{ 'Number of faulty VMs = ' + reg_numbers.stdout_lines|first|split('= ')|last|string if reg_numbers.stdout != '' and reg_numbers.stdout_lines|first is not search('not found') else '' }}"
      - "{{ 'Number of VM snapshots deleted = ' + reg_numbers.stdout_lines[1]|split('= ')|last|string if reg_numbers.stdout != '' and reg_numbers.stdout_lines[1] is not search('not found') else '' }}"
      - "{{ 'Disk space recovered = ' + reg_numbers.stdout_lines|last|split('= ')|last|string if reg_numbers.stdout != '' and reg_numbers.stdout_lines|last is not search('not found') else '' }}"
      - "{{ user_abort.stdout if user_abort is succeeded else '' }}"
      - "{{ playbook_status.stdout | regex_replace ('[\\*]*', '') | regex_replace ('[^\\.]* PLAY RECAP', '**PLAY RECAP**\n') | regex_replace ('((unreachable=|failed=)[1-9]+)', '**`\\1`**') | regex_replace ('\n.*[\\|] ', '\n') if (fe != '' or playbook_status.stdout == 'No Play Recap found') else '' }}"
      - ''
      - "The log file is **`{{ AUTOHOME }}/Logs/{{ LFILE|basename }}`**"
      - ''
      - '========================================================='
  - name: Send notification via Webex Teams
    uri:
      url: "https://api.ciscospark.com/v1/messages"
      method: POST
      headers:
        Authorization: "{{ PWEBEX_BOT_TOKEN }}"
      body_format: form-urlencoded
      body: 
        roomId: "{{ PWEBEX_ROOM_ID }}"
        markdown: "{{ NOTIF_MSG | join('\n') }}"
    environment:
      http_proxy: "{{ proxy_address|default('') }}"
      https_proxy: "{{ proxy_address|default('') }}"
  - assert:
      that: EXEC_STATUS|default([]) == []
  tags: [ 'never', 'notify' ]
