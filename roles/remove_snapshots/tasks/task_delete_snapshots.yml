---
# Tasks to delete snapshots of a VM in a given folder
- name: Get info for {{ curr_vm + ' in ' + curr_folder }}
  community.vmware.vmware_guest_info:
    hostname: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['address'] }}"
    username: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['username'] }}"
    password: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['password'] }}"
    datacenter: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] }}"
    folder: "{{ curr_folder }}"
    uuid: "{{ curr_uuid }}"
    validate_certs: false
  register: reg_guest_info
  no_log: true
  ignore_errors: true
- name: Define list of problematic VMs
  ansible.builtin.set_fact:
    problematic_list: "{{ problematic_list | default([]) + [curr_folder + ': ' + curr_vm] }}"
  when: reg_guest_info is failed
- name: Remove snapshots
  when: reg_guest_info is succeeded
  block:
    - name: Get powered off VMs
      ansible.builtin.include_tasks:
        file: task_get_poweredoff.yml
        apply:
          vars:
            folder_name: "{{ curr_folder }}"
            vm_name: "{{ curr_vm }}"
            vm_uuid: "{{ curr_uuid }}"
      when:
        - reg_guest_info.instance.hw_power_status == 'poweredOff'
    - name: Initialize snapshots IDs list
      ansible.builtin.set_fact:
        snapshots_ids: []
    - name: Define list of snapshots found
      ansible.builtin.set_fact:
        snapshots_list: "{{ snapshots_list | default([]) + [curr_folder + ': ' + curr_vm + ': ' + snapshot_item.name] }}"
        snapshots_ids: "{{ snapshots_ids + [snapshot_item.id] }}"
      when:
        - reg_guest_info.instance.snapshots != []
        - (ansible_date_time.date | to_datetime('%Y-%m-%d') - sct | to_datetime('%Y-%m-%d')).days | int >= datacenter.primary.max_snapshot_age
      vars:
        sct: "{{ snapshot_item.creation_time | split('T') | first }}"
      loop: "{{ reg_guest_info.instance.snapshots }}"
      loop_control:
        loop_var: snapshot_item
        label: "{{ snapshot_item }}"
    - name: Get snapshots info for {{ curr_vm + ' in ' + curr_folder }}
      community.vmware.vmware_guest_info:
        hostname: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['address'] }}"
        username: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['username'] }}"
        password: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['password'] }}"
        datacenter: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] }}"
        folder: "{{ curr_folder }}"
        uuid: "{{ curr_uuid }}"
        schema: 'vsphere'
        properties: [
          "config.createDate",
          "layoutEx.file"
        ]
        validate_certs: false
      register: reg_snaps_info
      until: reg_snaps_info.instance.config.createDate is search('T')
      no_log: true
    - name: Update attribute
      ansible.builtin.include_tasks:
        file: task_update_attribute.yml
        apply:
          vars:
            reg_var: "{{ reg_snaps_info }}"
    - name: Initialize the size of the snapshots
      ansible.builtin.set_fact:
        snaps_size: 0
    - name: Get snapshots size
      ansible.builtin.include_tasks:
        file: task_get_snapshots_size.yml
        apply:
          vars:
            snaps_ids: "{{ snapshots_ids }}"
      when:
        - snapshots_ids != []
    - name: Update the disk space recovered
      ansible.builtin.set_fact:
        snapshots_size: "{{ snapshots_size | default(0) | int + snaps_size | default(0) | int }}"
    - name: Update number of snapshots found
      ansible.builtin.set_fact:
        snapshots_counter: "{{ snapshots_counter | default(0) | int + 1 }}"
      when:
        - reg_guest_info.instance.snapshots != []
        - (ansible_date_time.date | to_datetime('%Y-%m-%d') - sct | to_datetime('%Y-%m-%d')).days | int >= datacenter.primary.max_snapshot_age
      vars:
        sct: "{{ snapshot_item.creation_time | split('T') | first }}"
      loop: "{{ reg_guest_info.instance.snapshots }}"
      loop_control:
        loop_var: snapshot_item
        label: "{{ snapshot_item }}"
    - name: Remove snapshots for {{ curr_vm + ' in ' + curr_folder }}
      community.vmware.vmware_guest_snapshot:
        hostname: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['address'] }}"
        username: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['username'] }}"
        password: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['password'] }}"
        datacenter: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['datacenter'] }}"
        folder: "{{ curr_folder }}"
        name: "{{ curr_vm }}"
        state: absent
        snapshot_name: "{{ snapshot_item.name }}"
        validate_certs: false
      when:
        - reg_guest_info.instance.snapshots != []
        - (ansible_date_time.date | to_datetime('%Y-%m-%d') - sct | to_datetime('%Y-%m-%d')).days | int >= datacenter.primary.max_snapshot_age
      vars:
        sct: "{{ snapshot_item.creation_time | split('T') | first }}"
      no_log: true
      loop: "{{ reg_guest_info.instance.snapshots }}"
      loop_control:
        loop_var: snapshot_item
        label: "{{ snapshot_item }}"
