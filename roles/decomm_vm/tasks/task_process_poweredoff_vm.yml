---
# Tasks for decomm_vm
- name: Define get_vm_list_dv_off
  ansible.builtin.set_fact:
    get_vm_list_dv_off: true
  when: reg_vm_list is not defined
- name: Getting list of VMs
  when: get_vm_list_dv_off | default(false)
  block:
    - name: Get list of VMs
      ansible.builtin.include_role:
        name: remove_snapshots
        tasks_from: task_get_list_vms.yml
  rescue:
    - name: Debug message
      ansible.builtin.debug:
        msg: "{{ reg_vm_list }}"
  always:
    - name: Assert that getting the list of VMs succeeded
      ansible.builtin.assert:
        that: reg_vm_list is succeeded
- name: Define build_list_dv_off
  ansible.builtin.set_fact:
    build_list_dv_off: true
  when: vm_list is not defined
- name: Define list of VMs
  ansible.builtin.set_fact:
    vm_list: "{{ vm_list | default([]) + [{'vm_folder': vm_item.folder, 'vm_name': vm_item.guest_name, 'vm_uuid': vm_item.uuid}] }}"
  loop: "{{ reg_vm_list.virtual_machines | rejectattr('guest_name', 'search', 'on-decomm-list|stCtlVM-') | \
    rejectattr('folder', 'search', 'Templates|vcenter|vCenter') | list }}"
  loop_control:
    loop_var: vm_item
    label: "{{ vm_item.guest_name }}"
  no_log: true
  when:
    - build_list_dv_off | default(false)
- name: Define build_offline_list_dv_off
  ansible.builtin.set_fact:
    build_offline_list_dv_off: true
  when: offline_vm_list is not defined
- name: Checking VM state
  when: build_offline_list_dv_off | default(false)
  block:
    - name: Initialize list of offline VMs
      ansible.builtin.set_fact:
        offline_vm_list: []
        offline_list: []
    - name: Check state
      ansible.builtin.include_tasks:
        file: task_check_state.yml
        apply:
          vars:
            curr_folder: "{{ vm_item.vm_folder }}"
            curr_vm: "{{ vm_item.vm_name }}"
            curr_uuid: "{{ vm_item.vm_uuid }}"
      loop: "{{ vm_list | sort(attribute='vm_folder') }}"
      loop_control:
        loop_var: vm_item
- name: Decommissioned powered off VM
  ansible.builtin.include_tasks:
    file: task_decommission_poweredoff_vm.yml
    apply:
      vars:
        curr_folder: "{{ vm_item.vm_folder }}"
        curr_vm: "{{ vm_item.vm_name }}"
        curr_uuid: "{{ vm_item.vm_uuid }}"
  loop: "{{ offline_vm_list | default([]) | sort(attribute='vm_folder') }}"
  loop_control:
    loop_var: vm_item
