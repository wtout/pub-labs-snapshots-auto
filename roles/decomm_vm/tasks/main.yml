---
# Tasks for decomm_vm
- block:
  - name: get current date and time
    ansible.builtin.setup:
      filter:
        - 'date_time'
    when:
      - ansible_date_time.date is not defined
      - ansible_date_time.date|default('') == ''
  - name: get the list of VMs
    community.vmware.vmware_vm_info:
      hostname: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['information']['address'] }}"
      username: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['username'] }}"
      password: "{{ hostvars[groups[('dr' if 'dr' in group_names else '') + 'vcenter'][0]]['credentials']['password'] }}"
      vm_type: vm
      validate_certs: no
    register: reg_vm_list
    no_log: yes
    when: vm_list is not defined
  - name: define list of VMs
    ansible.builtin.set_fact:
      vm_list: "{{ vm_list|default([]) + [{ 'vm_folder': vm_item.folder, 'vm_name': vm_item.guest_name, 'vm_uuid': vm_item.uuid}] }}"
    loop: "{{ reg_vm_list.virtual_machines|rejectattr('guest_name','search','on-decomm-list|stCtlVM-')|rejectattr('folder','search','Templates')|list }}"
    loop_control:
      loop_var: vm_item
      label: "{{ vm_item.guest_name }}"
    no_log: yes
    when: reg_vm_list is not skipped
  - include_tasks:
      file: task_decommission_vm.yml
      apply:
        vars:
          curr_folder: "{{ vm_item.vm_folder }}"
          curr_vm: "{{ vm_item.vm_name }}"
          curr_uuid: "{{ vm_item.vm_uuid }}"
    loop: "{{ vm_list|sort(attribute='vm_folder') }}"
    loop_control:
      loop_var: vm_item
  - ansible.builtin.debug:
      msg:
        - 'List of decommissioning list VMs:'
        - "{{ decomm_vm_list|default([]) }}"
        - "decomms_number = {{ decomm_vm_list|default([])|length }}"
  delegate_to: localhost
  run_once: yes
  tags: ['decomm_vm']
