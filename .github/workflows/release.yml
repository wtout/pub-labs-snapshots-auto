name: Test Deployment and Create Release

# Controls when the action will run
on:
  workflow_dispatch:
  push:
    branches:
      - develop

env:
  MYGH_TOKEN: ${{ secrets.WASS }}
  ORIGINAL_REPO_NAME: ${{ github.event.repository.name }}
  ORG_NAME: ${{ github.actor }}
  REGISTRY_USER: ${{ vars.DOCKERHUB_USERNAME }}
  REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}
  IMAGE_REGISTRY: registry-1.docker.io

jobs:

  test_deploy:
    if: ${{ ! startsWith(github.event.head_commit.message, 'Merge branch ') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.MYGH_TOKEN }}
      - name: Login to DockerHub
        uses: redhat-actions/podman-login@v1
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          registry: ${{ env.IMAGE_REGISTRY }}
      - name: Configure Git
        run: |
          git config user.email \<\>
          git config user.name "Wassim Tout"
      - name: Create Bash/vp.sh
        run: |
          echo -e "#! /bin/bash\necho ansible" > Bash/vp.sh
          chmod 755 Bash/vp.sh
      - name: Create .repovault.yml Vault
        run: |
          echo -e "REPOUSER='${{ env.ORG_NAME }}'\nREPOPASS='${{ env.MYGH_TOKEN }}'" > vars/.repovault.yml
          ansible-vault encrypt vars/.repovault.yml --vault-password-file Bash/vp.sh
      - name: Set Ansible version
        run: |
          sed -i 's/6.3.0/11.1.0/' Bash/common_parameters.sh
      - name: Create ${HOME}/certificates Directory
        run: |
          mkdir -p ${HOME}/certificates
      - name: Run Test
        run: |
          echo 'export MYINVOKER=github' >> ~/.bashrc
          bash -x Bash/play_deploy.sh --envname build_def_file --skip-tags $(grep -r ' tags:' roles/ | awk -F 'tags: ' '{print $NF}' | sed "s/\[\|\]\|'\|,//g" | tr ' ' '\n' | grep -ve 'always\|never\|define_inventory' | sort -u | xargs | tr ' ' ',')

  create_release:
    if: ${{ ! startsWith(github.event.head_commit.message, 'Merge branch ') }}
    runs-on: ubuntu-latest
    needs: test_deploy
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          token: ${{ env.MYGH_TOKEN }}
      - name: Configure Git
        run: |
          git config user.email \<\>
          git config user.name "Wassim Tout"
          git remote set-url origin https://${{ env.ORG_NAME }}:${{ env.MYGH_TOKEN }}@github.com/${{ env.ORG_NAME }}/${{ env.ORIGINAL_REPO_NAME }}.git
      - name: Get Remote Updates
        run: |
          git remote update
      - name: Update Local develop Branch
        run: |
          git pull origin develop
      - name: Get The Last Tag
        id: lt
        uses: wtout/get-last-tag-action@v1
      - name: Show the Action Tag
        run: |
          echo "The action tag is ${{ steps.lt.outputs.last-tag }}"
      - name: Get The Next Tag
        id: nt
        uses: wtout/get-next-tag-action@v4
        with:
          current-tag: ${{ steps.lt.outputs.last-tag }}
      - name: Create a Release Branch
        run: |
          git checkout -b release/${{ steps.nt.outputs.next-tag }} origin/develop
      - name: Switch to master branch
        run: |
          git checkout master
      - name: Update Local master Branch
        run: |
          git pull origin master
      - name: Test Merge
        run: |
          git merge --no-commit --no-ff release/${{ steps.nt.outputs.next-tag }} --allow-unrelated-histories -X theirs || exit 0
          if [[ -f .git/MERGE_HEAD ]]
          then
            git merge --abort
          fi
      - name: Merge release/${{ steps.nt.outputs.next-tag }} into master
        run: |
          git merge release/${{ steps.nt.outputs.next-tag }} --allow-unrelated-histories -X theirs
      - name: Create New Tag
        run: |
          git tag -a ${{ steps.nt.outputs.next-tag }} -m "Create release tag ${{ steps.nt.outputs.next-tag }}"
      - name: Push master Branch And Tags to Remote Repo
        run: |
          git push origin master
          git push origin --tags
      - name: Switch to develop branch
        run: |
          git checkout develop
      - name: Merge master into develop
        run: |
          git merge master
      - name: Push develop Branch To Remote Repo
        run: |
          git push origin develop
